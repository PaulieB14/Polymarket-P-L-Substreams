syntax = "proto3";

import "google/protobuf/timestamp.proto";

package contract.v1;

// Pure On-Chain P&L Data - NO SIMULATION OR TEST DATA
message PureOnChainPnL {
    repeated OnChainUserPnL user_pnls = 1;
    repeated OnChainMarketPnL market_pnls = 2;
    repeated OnChainGlobalPnL global_pnls = 3;
    repeated OnChainArbitrageOpportunity arbitrage_opportunities = 4;
    repeated OnChainTokenTransfer token_transfers = 5;
    repeated OnChainOrderFill order_fills = 6;
    string total_users = 7;
    string total_volume = 8;
    string total_profits = 9;
    string total_losses = 10;
    uint64 block_number = 11;
    google.protobuf.Timestamp block_timestamp = 12;
}

// On-Chain User P&L (from actual blockchain events only)
message OnChainUserPnL {
    string user_address = 1;
    string total_realized_pnl = 2;
    string total_unrealized_pnl = 3;
    string total_volume = 4;
    string total_trades = 5;
    string winning_trades = 6;
    string losing_trades = 7;
    string win_rate = 8;
    google.protobuf.Timestamp last_activity = 9;
    repeated OnChainTokenHolding holdings = 10;
    string net_usdc = 11;
    string share_value = 12;
    string trading_pnl = 13;
    string liq_pnl = 14;
    string total_pnl = 15;
}

// On-Chain Market P&L (from actual market events only)
message OnChainMarketPnL {
    string condition_id = 1;
    string question_id = 2;
    string total_volume = 3;
    string total_trades = 4;
    string total_fees = 5;
    string winning_outcome = 6;
    string resolution_price = 7;
    google.protobuf.Timestamp created_at = 8;
    google.protobuf.Timestamp resolved_at = 9;
    bool is_neg_risk = 10;
    bool is_augmented = 11;
}

// On-Chain Global P&L (aggregated from actual events only)
message OnChainGlobalPnL {
    string total_volume = 1;
    string total_trades = 2;
    string total_fees = 3;
    string active_users = 4;
    string active_markets = 5;
    string resolved_markets = 6;
    google.protobuf.Timestamp timestamp = 7;
}

// On-Chain Arbitrage Opportunity (calculated from real prices only)
message OnChainArbitrageOpportunity {
    string market_id = 1;
    string event_id = 2;
    string total_no_cost = 3;
    string guaranteed_payout = 4;
    string profit = 5;
    string profit_percentage = 6;
    repeated string no_outcomes = 7;
    google.protobuf.Timestamp detected_at = 8;
    uint64 block_number = 9;
    string transaction_hash = 10;
    bool is_real_arbitrage = 11;  // true if calculated from actual on-chain prices
}

// On-Chain Token Transfer (from actual transfer events only)
message OnChainTokenTransfer {
    string transaction_hash = 1;
    uint32 log_index = 2;
    google.protobuf.Timestamp block_timestamp = 3;
    uint64 block_number = 4;
    string contract_address = 5;
    string from_address = 6;
    string to_address = 7;
    string token_id = 8;
    string amount = 9;
    string transfer_type = 10;  // "ERC1155_SINGLE", "ERC1155_BATCH", "ERC20"
}

// On-Chain Order Fill (from actual order fill events only)
message OnChainOrderFill {
    string transaction_hash = 1;
    uint32 log_index = 2;
    google.protobuf.Timestamp block_timestamp = 3;
    uint64 block_number = 4;
    string maker_address = 5;
    string taker_address = 6;
    string maker_asset_id = 7;
    string taker_asset_id = 8;
    string maker_amount_filled = 9;
    string taker_amount_filled = 10;
    string fee = 11;
    string order_hash = 12;
    bool is_neg_risk = 13;
    string event_id = 14;
}

// On-Chain Token Holding (from actual transfer events only)
message OnChainTokenHolding {
    string token_id = 1;
    string amount = 2;
    string condition_id = 3;
    string question = 4;
    google.protobuf.Timestamp last_updated = 5;
    string current_price = 6;
    string share_value = 7;
}

// TokenRegistered Events (ON-CHAIN ONLY)
message TokenRegisteredEvents {
    repeated TokenRegistered token_registered = 1;
}

message TokenRegistered {
    string evt_tx_hash = 1;
    uint32 evt_index = 2;
    google.protobuf.Timestamp evt_block_time = 3;
    uint64 evt_block_number = 4;
    bytes condition_id = 5;
    string token0 = 6;
    string token1 = 7;
}

// NegRisk TokenRegistered Events (ON-CHAIN ONLY)
message NegRiskTokenRegisteredEvents {
    repeated NegRiskTokenRegistered neg_risk_token_registered = 1;
}

message NegRiskTokenRegistered {
    string evt_tx_hash = 1;
    uint32 evt_index = 2;
    google.protobuf.Timestamp evt_block_time = 3;
    uint64 evt_block_number = 4;
    bytes condition_id = 5;
    string token0 = 6;
    string token1 = 7;
    bool is_neg_risk = 8;
    bool is_augmented = 9;
    string event_id = 10;
}

// OrderFilled Events (ON-CHAIN ONLY)
message OrderFilledEvents {
    repeated OrderFilled order_filled = 1;
}

message OrderFilled {
    string evt_tx_hash = 1;
    uint32 evt_index = 2;
    google.protobuf.Timestamp evt_block_time = 3;
    uint64 evt_block_number = 4;
    bytes maker = 5;
    bytes taker = 6;
    string maker_asset_id = 7;
    string taker_asset_id = 8;
    string maker_amount_filled = 9;
    string taker_amount_filled = 10;
    string fee = 11;
    bytes order_hash = 12;
}

// NegRisk OrderFilled Events (ON-CHAIN ONLY)
message NegRiskOrderFilledEvents {
    repeated NegRiskOrderFilled neg_risk_order_filled = 1;
}

message NegRiskOrderFilled {
    string evt_tx_hash = 1;
    uint32 evt_index = 2;
    google.protobuf.Timestamp evt_block_time = 3;
    uint64 evt_block_number = 4;
    bytes maker = 5;
    bytes taker = 6;
    string maker_asset_id = 7;
    string taker_asset_id = 8;
    string maker_amount_filled = 9;
    string taker_amount_filled = 10;
    string fee = 11;
    bytes order_hash = 12;
    bool is_neg_risk = 13;
    string event_id = 14;
    string outcome_type = 15;
}

// Fixed Product Market Maker Factory Events (ON-CHAIN ONLY)
message FpmmFactoryEvents {
    repeated FpmmFactoryCreation factory_creations = 1;
}

message FpmmFactoryCreation {
    string evt_tx_hash = 1;
    uint32 evt_index = 2;
    google.protobuf.Timestamp evt_block_time = 3;
    uint64 evt_block_number = 4;
    bytes fixed_product_market_maker = 5;
    bytes creator = 6;
    repeated bytes condition_ids = 7;
    bytes collateral_token = 8;
    string fee = 9;
    string end_time = 10;
    string question_id = 11;
}

// ERC1155 TransferSingle Events (ON-CHAIN ONLY)
message Erc1155TransferSingleEvents {
    repeated Erc1155TransferSingle transfer_single = 1;
}

message Erc1155TransferSingle {
    string evt_tx_hash = 1;
    uint32 evt_index = 2;
    google.protobuf.Timestamp evt_block_time = 3;
    uint64 evt_block_number = 4;
    bytes contract_address = 5;
    bytes operator = 6;
    bytes from = 7;
    bytes to = 8;
    string id = 9;
    string value = 10;
}

// ERC1155 TransferBatch Events (ON-CHAIN ONLY)
message Erc1155TransferBatchEvents {
    repeated Erc1155TransferBatch transfer_batch = 1;
}

message Erc1155TransferBatch {
    string evt_tx_hash = 1;
    uint32 evt_index = 2;
    google.protobuf.Timestamp evt_block_time = 3;
    uint64 evt_block_number = 4;
    bytes contract_address = 5;
    bytes operator = 6;
    bytes from = 7;
    bytes to = 8;
    repeated string ids = 9;
    repeated string values = 10;
}

// ERC20 Transfer Events (ON-CHAIN ONLY)
message Erc20TransferEvents {
    repeated Erc20Transfer transfer = 1;
}

message Erc20Transfer {
    string evt_tx_hash = 1;
    uint32 evt_index = 2;
    google.protobuf.Timestamp evt_block_time = 3;
    uint64 evt_block_number = 4;
    bytes contract_address = 5;
    bytes from = 6;
    bytes to = 7;
    string value = 8;
}

// Merkle Distributor Events (ON-CHAIN ONLY)
message MerkleDistributorEvents {
    repeated MerkleDistributorClaimed claimed = 1;
}

message MerkleDistributorClaimed {
    string evt_tx_hash = 1;
    uint32 evt_index = 2;
    google.protobuf.Timestamp evt_block_time = 3;
    uint64 evt_block_number = 4;
    bytes airdrop_recipient = 5;
    string amount = 6;
    string token_address = 7;
}

// CTF Events (ON-CHAIN ONLY)
message CtfEvents {
    repeated Ctf_ConditionPreparation condition_preparations = 1;
    repeated Ctf_ConditionResolution condition_resolutions = 2;
    repeated Ctf_PositionSplit position_splits = 3;
    repeated Ctf_PositionMerge position_merges = 4;
    repeated Ctf_PositionRedeem position_redemptions = 5;
    repeated Ctf_TransferSingle transfer_singles = 6;
    repeated Ctf_TransferBatch transfer_batches = 7;
}

// USDC Events (ON-CHAIN ONLY)
message UsdcEvents {
    repeated Usdc_Transfer transfers = 1;
    repeated Usdc_Approval approvals = 2;
}

// CTF Event Messages (ON-CHAIN ONLY)
message Ctf_ConditionPreparation {
    string evt_tx_hash = 1;
    uint32 evt_index = 2;
    google.protobuf.Timestamp evt_block_time = 3;
    uint64 evt_block_number = 4;
    bytes condition_id = 5;
    bytes oracle = 6;
    bytes question_id = 7;
    uint32 outcome_slot_count = 8;
}

message Ctf_ConditionResolution {
    string evt_tx_hash = 1;
    uint32 evt_index = 2;
    google.protobuf.Timestamp evt_block_time = 3;
    uint64 evt_block_number = 4;
    bytes condition_id = 5;
    bytes oracle = 6;
    bytes question_id = 7;
    uint32 outcome_slot_count = 8;
    repeated string payout_numerators = 9;
    string payout_denominator = 10;
}

message Ctf_PositionSplit {
    string evt_tx_hash = 1;
    uint32 evt_index = 2;
    google.protobuf.Timestamp evt_block_time = 3;
    uint64 evt_block_number = 4;
    bytes stakeholder = 5;
    bytes collateral_token = 6;
    bytes parent_collection_id = 7;
    bytes condition_id = 8;
    repeated string partition = 9;
    string amount = 10;
}

message Ctf_PositionMerge {
    string evt_tx_hash = 1;
    uint32 evt_index = 2;
    google.protobuf.Timestamp evt_block_time = 3;
    uint64 evt_block_number = 4;
    bytes stakeholder = 5;
    bytes collateral_token = 6;
    bytes parent_collection_id = 7;
    bytes condition_id = 8;
    repeated string partition = 9;
    string amount = 10;
}

message Ctf_PositionRedeem {
    string evt_tx_hash = 1;
    uint32 evt_index = 2;
    google.protobuf.Timestamp evt_block_time = 3;
    uint64 evt_block_number = 4;
    bytes redeemer = 5;
    bytes collateral_token = 6;
    bytes parent_collection_id = 7;
    bytes condition_id = 8;
    repeated string index_sets = 9;
    string payout = 10;
}

message Ctf_TransferSingle {
    string evt_tx_hash = 1;
    uint32 evt_index = 2;
    google.protobuf.Timestamp evt_block_time = 3;
    uint64 evt_block_number = 4;
    bytes operator = 5;
    bytes from = 6;
    bytes to = 7;
    string token_id = 8;
    string value = 9;
}

message Ctf_TransferBatch {
    string evt_tx_hash = 1;
    uint32 evt_index = 2;
    google.protobuf.Timestamp evt_block_time = 3;
    uint64 evt_block_number = 4;
    bytes operator = 5;
    bytes from = 6;
    bytes to = 7;
    repeated string token_ids = 8;
    repeated string values = 9;
}

// USDC Event Messages (ON-CHAIN ONLY)
message Usdc_Transfer {
    string evt_tx_hash = 1;
    uint32 evt_index = 2;
    google.protobuf.Timestamp evt_block_time = 3;
    uint64 evt_block_number = 4;
    bytes from = 5;
    bytes to = 6;
    string value = 7;
}

message Usdc_Approval {
    string evt_tx_hash = 1;
    uint32 evt_index = 2;
    google.protobuf.Timestamp evt_block_time = 3;
    uint64 evt_block_number = 4;
    bytes owner = 5;
    bytes spender = 6;
    string value = 7;
}
