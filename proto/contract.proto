syntax = "proto3";

import "google/protobuf/timestamp.proto";

package contract.v1;

// Pure Dune Query P&L Data - EXACT MATCH TO DUNE QUERY
message PureDunePnL {
    repeated DuneUserPnL user_pnls = 1;
    repeated DuneMarketData market_data = 2;
    repeated DuneTokenTransfer token_transfers = 3;
    repeated DuneOrderFill order_fills = 4;
    repeated DuneRewardClaim reward_claims = 5;
    repeated DunePriceData price_data = 6;
    string total_users = 7;
    string total_volume = 8;
    string total_profits = 9;
    string total_losses = 10;
    uint64 block_number = 11;
    google.protobuf.Timestamp block_timestamp = 12;
}

// Dune User P&L - Exact match to Dune query output
message DuneUserPnL {
    string user_address = 1;
    string net_usdc = 2;           // net_usdc from Dune query
    string share_value = 3;        // share_value from Dune query  
    string trading_pnl = 4;        // trading_pnl from Dune query
    string liq_pnl = 5;            // liq_pnl from Dune query
    string total_pnl = 6;          // total_pnl from Dune query
    repeated DuneTokenHolding holdings = 7;
    google.protobuf.Timestamp last_activity = 8;
}

// Dune Market Data - From markets CTE in Dune query
message DuneMarketData {
    string condition_id = 1;
    string token0 = 2;
    string token1 = 3;
    string question = 4;
    bool is_neg_risk = 5;
    google.protobuf.Timestamp created_at = 6;
    uint64 block_number = 7;
}

// Dune Token Transfer - From combined CTE in Dune query
message DuneTokenTransfer {
    string transaction_hash = 1;
    string user_address = 2;
    string token_id = 3;
    string amount = 4;             // Already converted to USDC units (divided by 1000000)
    string transfer_type = 5;      // "ERC1155_SINGLE", "ERC1155_BATCH", "ERC20"
    google.protobuf.Timestamp block_timestamp = 6;
    uint64 block_number = 7;
}

// Dune Order Fill - From clob_combined CTE in Dune query
message DuneOrderFill {
    string transaction_hash = 1;
    uint32 log_index = 2;
    google.protobuf.Timestamp block_timestamp = 3;
    uint64 block_number = 4;
    string maker_address = 5;
    string taker_address = 6;
    string maker_asset_id = 7;
    string taker_asset_id = 8;
    string maker_amount_filled = 9;
    string taker_amount_filled = 10;
    string fee = 11;
    string order_hash = 12;
    bool is_neg_risk = 13;
}

// Dune Reward Claim - From rewards CTE in Dune query
message DuneRewardClaim {
    string transaction_hash = 1;
    uint32 log_index = 2;
    google.protobuf.Timestamp block_timestamp = 3;
    uint64 block_number = 4;
    string airdrop_recipient = 5;
    string asset = 6;              // "uma", "usdc"
    string lc_amount = 7;          // Local currency amount
    string usd_amount = 8;         // USD amount
    string token_address = 9;
}

// Dune Price Data - From prices CTE in Dune query
message DunePriceData {
    string token_id = 1;
    string price = 2;              // Calculated from latest trades
    google.protobuf.Timestamp last_trade_time = 3;
    uint64 block_number = 4;
}

// Dune Token Holding - From holders CTE in Dune query
message DuneTokenHolding {
    string user_address = 1;
    string token_id = 2;
    string amount = 3;             // Already converted to USDC units
    string latest_price = 4;       // P1_P2_Latest_Price from Dune query
    string share_value = 5;        // price * amount
}

// TokenRegistered Events (CTF Exchange)
message TokenRegisteredEvents {
    repeated TokenRegistered token_registered = 1;
}

message TokenRegistered {
    string evt_tx_hash = 1;
    uint32 evt_index = 2;
    google.protobuf.Timestamp evt_block_time = 3;
    uint64 evt_block_number = 4;
    bytes condition_id = 5;
    string token0 = 6;
    string token1 = 7;
}

// NegRisk TokenRegistered Events
message NegRiskTokenRegisteredEvents {
    repeated NegRiskTokenRegistered neg_risk_token_registered = 1;
}

message NegRiskTokenRegistered {
    string evt_tx_hash = 1;
    uint32 evt_index = 2;
    google.protobuf.Timestamp evt_block_time = 3;
    uint64 evt_block_number = 4;
    bytes condition_id = 5;
    string token0 = 6;
    string token1 = 7;
    bool is_neg_risk = 8;
    bool is_augmented = 9;
    string event_id = 10;
}

// OrderFilled Events
message OrderFilledEvents {
    repeated OrderFilled order_filled = 1;
}

message OrderFilled {
    string evt_tx_hash = 1;
    uint32 evt_index = 2;
    google.protobuf.Timestamp evt_block_time = 3;
    uint64 evt_block_number = 4;
    bytes maker = 5;
    bytes taker = 6;
    string maker_asset_id = 7;
    string taker_asset_id = 8;
    string maker_amount_filled = 9;
    string taker_amount_filled = 10;
    string fee = 11;
    bytes order_hash = 12;
}

// Fixed Product Market Maker Factory Events
message FpmmFactoryEvents {
    repeated FpmmFactoryCreation factory_creations = 1;
}

message FpmmFactoryCreation {
    string evt_tx_hash = 1;
    uint32 evt_index = 2;
    google.protobuf.Timestamp evt_block_time = 3;
    uint64 evt_block_number = 4;
    bytes fixed_product_market_maker = 5;
    bytes creator = 6;
    repeated bytes condition_ids = 7;
    bytes collateral_token = 8;
    string fee = 9;
    string end_time = 10;
    string question_id = 11;
}

// ERC1155 TransferSingle Events
message Erc1155TransferSingleEvents {
    repeated Erc1155TransferSingle transfer_single = 1;
}

message Erc1155TransferSingle {
    string evt_tx_hash = 1;
    uint32 evt_index = 2;
    google.protobuf.Timestamp evt_block_time = 3;
    uint64 evt_block_number = 4;
    bytes contract_address = 5;
    bytes operator = 6;
    bytes from = 7;
    bytes to = 8;
    string id = 9;
    string value = 10;
}

// ERC1155 TransferBatch Events
message Erc1155TransferBatchEvents {
    repeated Erc1155TransferBatch transfer_batch = 1;
}

message Erc1155TransferBatch {
    string evt_tx_hash = 1;
    uint32 evt_index = 2;
    google.protobuf.Timestamp evt_block_time = 3;
    uint64 evt_block_number = 4;
    bytes contract_address = 5;
    bytes operator = 6;
    bytes from = 7;
    bytes to = 8;
    repeated string ids = 9;
    repeated string values = 10;
}

// ERC20 Transfer Events
message Erc20TransferEvents {
    repeated Erc20Transfer transfer = 1;
}

message Erc20Transfer {
    string evt_tx_hash = 1;
    uint32 evt_index = 2;
    google.protobuf.Timestamp evt_block_time = 3;
    uint64 evt_block_number = 4;
    bytes contract_address = 5;
    bytes from = 6;
    bytes to = 7;
    string value = 8;
}

// Merkle Distributor Events
message MerkleDistributorEvents {
    repeated MerkleDistributorClaimed claimed = 1;
}

message MerkleDistributorClaimed {
    string evt_tx_hash = 1;
    uint32 evt_index = 2;
    google.protobuf.Timestamp evt_block_time = 3;
    uint64 evt_block_number = 4;
    bytes airdrop_recipient = 5;
    string amount = 6;
    string token_address = 7;
}

// CTF Events
message CtfEvents {
    repeated Ctf_ConditionPreparation condition_preparations = 1;
    repeated Ctf_ConditionResolution condition_resolutions = 2;
    repeated Ctf_PositionSplit position_splits = 3;
    repeated Ctf_PositionMerge position_merges = 4;
    repeated Ctf_PositionRedeem position_redemptions = 5;
    repeated Ctf_TransferSingle transfer_singles = 6;
    repeated Ctf_TransferBatch transfer_batches = 7;
}

// USDC Events
message UsdcEvents {
    repeated Usdc_Transfer transfers = 1;
    repeated Usdc_Approval approvals = 2;
}

// CTF Event Messages
message Ctf_ConditionPreparation {
    string evt_tx_hash = 1;
    uint32 evt_index = 2;
    google.protobuf.Timestamp evt_block_time = 3;
    uint64 evt_block_number = 4;
    bytes condition_id = 5;
    bytes oracle = 6;
    bytes question_id = 7;
    uint32 outcome_slot_count = 8;
}

message Ctf_ConditionResolution {
    string evt_tx_hash = 1;
    uint32 evt_index = 2;
    google.protobuf.Timestamp evt_block_time = 3;
    uint64 evt_block_number = 4;
    bytes condition_id = 5;
    bytes oracle = 6;
    bytes question_id = 7;
    uint32 outcome_slot_count = 8;
    repeated string payout_numerators = 9;
    string payout_denominator = 10;
}

message Ctf_PositionSplit {
    string evt_tx_hash = 1;
    uint32 evt_index = 2;
    google.protobuf.Timestamp evt_block_time = 3;
    uint64 evt_block_number = 4;
    bytes stakeholder = 5;
    bytes collateral_token = 6;
    bytes parent_collection_id = 7;
    bytes condition_id = 8;
    repeated string partition = 9;
    string amount = 10;
}

message Ctf_PositionMerge {
    string evt_tx_hash = 1;
    uint32 evt_index = 2;
    google.protobuf.Timestamp evt_block_time = 3;
    uint64 evt_block_number = 4;
    bytes stakeholder = 5;
    bytes collateral_token = 6;
    bytes parent_collection_id = 7;
    bytes condition_id = 8;
    repeated string partition = 9;
    string amount = 10;
}

message Ctf_PositionRedeem {
    string evt_tx_hash = 1;
    uint32 evt_index = 2;
    google.protobuf.Timestamp evt_block_time = 3;
    uint64 evt_block_number = 4;
    bytes redeemer = 5;
    bytes collateral_token = 6;
    bytes parent_collection_id = 7;
    bytes condition_id = 8;
    repeated string index_sets = 9;
    string payout = 10;
}

message Ctf_TransferSingle {
    string evt_tx_hash = 1;
    uint32 evt_index = 2;
    google.protobuf.Timestamp evt_block_time = 3;
    uint64 evt_block_number = 4;
    bytes operator = 5;
    bytes from = 6;
    bytes to = 7;
    string token_id = 8;
    string value = 9;
}

message Ctf_TransferBatch {
    string evt_tx_hash = 1;
    uint32 evt_index = 2;
    google.protobuf.Timestamp evt_block_time = 3;
    uint64 evt_block_number = 4;
    bytes operator = 5;
    bytes from = 6;
    bytes to = 7;
    repeated string token_ids = 8;
    repeated string values = 9;
}

// USDC Event Messages
message Usdc_Transfer {
    string evt_tx_hash = 1;
    uint32 evt_index = 2;
    google.protobuf.Timestamp evt_block_time = 3;
    uint64 evt_block_number = 4;
    bytes from = 5;
    bytes to = 6;
    string value = 7;
}

message Usdc_Approval {
    string evt_tx_hash = 1;
    uint32 evt_index = 2;
    google.protobuf.Timestamp evt_block_time = 3;
    uint64 evt_block_number = 4;
    bytes owner = 5;
    bytes spender = 6;
    string value = 7;
}
