// @generated
// This file is @generated by prost-build.
/// CTF Events for P&L Tracking
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CtfEvents {
    #[prost(message, repeated, tag="1")]
    pub condition_preparations: ::prost::alloc::vec::Vec<CtfConditionPreparation>,
    #[prost(message, repeated, tag="2")]
    pub condition_resolutions: ::prost::alloc::vec::Vec<CtfConditionResolution>,
    #[prost(message, repeated, tag="3")]
    pub position_splits: ::prost::alloc::vec::Vec<CtfPositionSplit>,
    #[prost(message, repeated, tag="4")]
    pub position_merges: ::prost::alloc::vec::Vec<CtfPositionMerge>,
    #[prost(message, repeated, tag="5")]
    pub position_redemptions: ::prost::alloc::vec::Vec<CtfPositionRedeem>,
    #[prost(message, repeated, tag="6")]
    pub transfer_singles: ::prost::alloc::vec::Vec<CtfTransferSingle>,
    #[prost(message, repeated, tag="7")]
    pub transfer_batches: ::prost::alloc::vec::Vec<CtfTransferBatch>,
}
/// CTF Exchange Events (Orderbook)
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CtfExchangeEvents {
    #[prost(message, repeated, tag="1")]
    pub order_filleds: ::prost::alloc::vec::Vec<CtfExchangeOrderFilled>,
    #[prost(message, repeated, tag="2")]
    pub orders_matcheds: ::prost::alloc::vec::Vec<CtfExchangeOrdersMatched>,
    #[prost(message, repeated, tag="3")]
    pub order_cancelleds: ::prost::alloc::vec::Vec<CtfExchangeOrderCancelled>,
    #[prost(message, repeated, tag="4")]
    pub fee_chargeds: ::prost::alloc::vec::Vec<CtfExchangeFeeCharged>,
    #[prost(message, repeated, tag="5")]
    pub token_registereds: ::prost::alloc::vec::Vec<CtfExchangeTokenRegistered>,
}
/// USDC Events
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UsdcEvents {
    #[prost(message, repeated, tag="1")]
    pub transfers: ::prost::alloc::vec::Vec<UsdcTransfer>,
    #[prost(message, repeated, tag="2")]
    pub approvals: ::prost::alloc::vec::Vec<UsdcApproval>,
}
/// User Position Tracking
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UserPositions {
    #[prost(message, repeated, tag="1")]
    pub positions: ::prost::alloc::vec::Vec<UserPosition>,
    #[prost(message, repeated, tag="2")]
    pub updates: ::prost::alloc::vec::Vec<PositionUpdate>,
    #[prost(message, repeated, tag="3")]
    pub resolutions: ::prost::alloc::vec::Vec<MarketResolution>,
}
/// P&L Data Aggregation
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PnLData {
    #[prost(message, repeated, tag="1")]
    pub user_pnls: ::prost::alloc::vec::Vec<UserPnL>,
    #[prost(message, repeated, tag="2")]
    pub market_pnls: ::prost::alloc::vec::Vec<MarketPnL>,
    #[prost(message, repeated, tag="3")]
    pub global_pnls: ::prost::alloc::vec::Vec<GlobalPnL>,
    #[prost(uint64, tag="4")]
    pub total_users: u64,
    #[prost(string, tag="5")]
    pub total_volume: ::prost::alloc::string::String,
    #[prost(string, tag="6")]
    pub total_profits: ::prost::alloc::string::String,
    #[prost(string, tag="7")]
    pub total_losses: ::prost::alloc::string::String,
    #[prost(uint64, tag="8")]
    pub block_number: u64,
    #[prost(message, optional, tag="9")]
    pub block_timestamp: ::core::option::Option<::prost_types::Timestamp>,
}
/// CTF Event Messages
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CtfConditionPreparation {
    #[prost(string, tag="1")]
    pub evt_tx_hash: ::prost::alloc::string::String,
    #[prost(uint32, tag="2")]
    pub evt_index: u32,
    #[prost(message, optional, tag="3")]
    pub evt_block_time: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(uint64, tag="4")]
    pub evt_block_number: u64,
    #[prost(bytes="vec", tag="5")]
    pub condition_id: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", tag="6")]
    pub oracle: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", tag="7")]
    pub question_id: ::prost::alloc::vec::Vec<u8>,
    #[prost(uint32, tag="8")]
    pub outcome_slot_count: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CtfConditionResolution {
    #[prost(string, tag="1")]
    pub evt_tx_hash: ::prost::alloc::string::String,
    #[prost(uint32, tag="2")]
    pub evt_index: u32,
    #[prost(message, optional, tag="3")]
    pub evt_block_time: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(uint64, tag="4")]
    pub evt_block_number: u64,
    #[prost(bytes="vec", tag="5")]
    pub condition_id: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", tag="6")]
    pub oracle: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", tag="7")]
    pub question_id: ::prost::alloc::vec::Vec<u8>,
    #[prost(uint32, tag="8")]
    pub outcome_slot_count: u32,
    #[prost(string, repeated, tag="9")]
    pub payout_numerators: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(string, tag="10")]
    pub payout_denominator: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CtfPositionSplit {
    #[prost(string, tag="1")]
    pub evt_tx_hash: ::prost::alloc::string::String,
    #[prost(uint32, tag="2")]
    pub evt_index: u32,
    #[prost(message, optional, tag="3")]
    pub evt_block_time: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(uint64, tag="4")]
    pub evt_block_number: u64,
    #[prost(bytes="vec", tag="5")]
    pub stakeholder: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", tag="6")]
    pub collateral_token: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", tag="7")]
    pub parent_collection_id: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", tag="8")]
    pub condition_id: ::prost::alloc::vec::Vec<u8>,
    #[prost(string, repeated, tag="9")]
    pub partition: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(string, tag="10")]
    pub amount: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CtfPositionMerge {
    #[prost(string, tag="1")]
    pub evt_tx_hash: ::prost::alloc::string::String,
    #[prost(uint32, tag="2")]
    pub evt_index: u32,
    #[prost(message, optional, tag="3")]
    pub evt_block_time: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(uint64, tag="4")]
    pub evt_block_number: u64,
    #[prost(bytes="vec", tag="5")]
    pub stakeholder: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", tag="6")]
    pub collateral_token: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", tag="7")]
    pub parent_collection_id: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", tag="8")]
    pub condition_id: ::prost::alloc::vec::Vec<u8>,
    #[prost(string, repeated, tag="9")]
    pub partition: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(string, tag="10")]
    pub amount: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CtfPositionRedeem {
    #[prost(string, tag="1")]
    pub evt_tx_hash: ::prost::alloc::string::String,
    #[prost(uint32, tag="2")]
    pub evt_index: u32,
    #[prost(message, optional, tag="3")]
    pub evt_block_time: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(uint64, tag="4")]
    pub evt_block_number: u64,
    #[prost(bytes="vec", tag="5")]
    pub redeemer: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", tag="6")]
    pub collateral_token: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", tag="7")]
    pub parent_collection_id: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", tag="8")]
    pub condition_id: ::prost::alloc::vec::Vec<u8>,
    #[prost(string, repeated, tag="9")]
    pub index_sets: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(string, tag="10")]
    pub payout: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CtfTransferSingle {
    #[prost(string, tag="1")]
    pub evt_tx_hash: ::prost::alloc::string::String,
    #[prost(uint32, tag="2")]
    pub evt_index: u32,
    #[prost(message, optional, tag="3")]
    pub evt_block_time: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(uint64, tag="4")]
    pub evt_block_number: u64,
    #[prost(bytes="vec", tag="5")]
    pub operator: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", tag="6")]
    pub from: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", tag="7")]
    pub to: ::prost::alloc::vec::Vec<u8>,
    #[prost(string, tag="8")]
    pub token_id: ::prost::alloc::string::String,
    #[prost(string, tag="9")]
    pub value: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CtfTransferBatch {
    #[prost(string, tag="1")]
    pub evt_tx_hash: ::prost::alloc::string::String,
    #[prost(uint32, tag="2")]
    pub evt_index: u32,
    #[prost(message, optional, tag="3")]
    pub evt_block_time: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(uint64, tag="4")]
    pub evt_block_number: u64,
    #[prost(bytes="vec", tag="5")]
    pub operator: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", tag="6")]
    pub from: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", tag="7")]
    pub to: ::prost::alloc::vec::Vec<u8>,
    #[prost(string, repeated, tag="8")]
    pub token_ids: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(string, repeated, tag="9")]
    pub values: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
/// User Position Messages
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UserPosition {
    #[prost(string, tag="1")]
    pub user_address: ::prost::alloc::string::String,
    #[prost(string, tag="2")]
    pub token_id: ::prost::alloc::string::String,
    #[prost(string, tag="3")]
    pub condition_id: ::prost::alloc::string::String,
    #[prost(string, tag="4")]
    pub outcome_index: ::prost::alloc::string::String,
    #[prost(string, tag="5")]
    pub amount_held: ::prost::alloc::string::String,
    #[prost(string, tag="6")]
    pub average_price: ::prost::alloc::string::String,
    #[prost(string, tag="7")]
    pub total_bought: ::prost::alloc::string::String,
    #[prost(string, tag="8")]
    pub total_sold: ::prost::alloc::string::String,
    #[prost(string, tag="9")]
    pub realized_pnl: ::prost::alloc::string::String,
    #[prost(string, tag="10")]
    pub unrealized_pnl: ::prost::alloc::string::String,
    #[prost(message, optional, tag="11")]
    pub first_seen: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(message, optional, tag="12")]
    pub last_updated: ::core::option::Option<::prost_types::Timestamp>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PositionUpdate {
    #[prost(string, tag="1")]
    pub user_address: ::prost::alloc::string::String,
    #[prost(string, tag="2")]
    pub token_id: ::prost::alloc::string::String,
    #[prost(string, tag="3")]
    pub transaction_hash: ::prost::alloc::string::String,
    /// "buy", "sell", "split", "merge", "redeem"
    #[prost(string, tag="4")]
    pub update_type: ::prost::alloc::string::String,
    #[prost(string, tag="5")]
    pub amount: ::prost::alloc::string::String,
    #[prost(string, tag="6")]
    pub price: ::prost::alloc::string::String,
    #[prost(string, tag="7")]
    pub pnl_change: ::prost::alloc::string::String,
    #[prost(message, optional, tag="8")]
    pub timestamp: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(uint64, tag="9")]
    pub block_number: u64,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MarketResolution {
    #[prost(string, tag="1")]
    pub condition_id: ::prost::alloc::string::String,
    #[prost(string, tag="2")]
    pub question_id: ::prost::alloc::string::String,
    #[prost(string, repeated, tag="3")]
    pub payout_numerators: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(string, tag="4")]
    pub payout_denominator: ::prost::alloc::string::String,
    #[prost(string, tag="5")]
    pub winning_outcome: ::prost::alloc::string::String,
    #[prost(message, optional, tag="6")]
    pub resolution_timestamp: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(uint64, tag="7")]
    pub block_number: u64,
}
/// P&L Tracking Messages
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UserPnL {
    #[prost(string, tag="1")]
    pub user_address: ::prost::alloc::string::String,
    #[prost(string, tag="2")]
    pub total_realized_pnl: ::prost::alloc::string::String,
    #[prost(string, tag="3")]
    pub total_unrealized_pnl: ::prost::alloc::string::String,
    #[prost(string, tag="4")]
    pub total_volume: ::prost::alloc::string::String,
    #[prost(string, tag="5")]
    pub total_trades: ::prost::alloc::string::String,
    #[prost(string, tag="6")]
    pub winning_trades: ::prost::alloc::string::String,
    #[prost(string, tag="7")]
    pub losing_trades: ::prost::alloc::string::String,
    #[prost(string, tag="8")]
    pub win_rate: ::prost::alloc::string::String,
    #[prost(message, optional, tag="9")]
    pub last_activity: ::core::option::Option<::prost_types::Timestamp>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MarketPnL {
    #[prost(string, tag="1")]
    pub condition_id: ::prost::alloc::string::String,
    #[prost(string, tag="2")]
    pub question_id: ::prost::alloc::string::String,
    #[prost(string, tag="3")]
    pub total_volume: ::prost::alloc::string::String,
    #[prost(string, tag="4")]
    pub total_trades: ::prost::alloc::string::String,
    #[prost(string, tag="5")]
    pub total_fees: ::prost::alloc::string::String,
    #[prost(string, tag="6")]
    pub winning_outcome: ::prost::alloc::string::String,
    #[prost(string, tag="7")]
    pub resolution_price: ::prost::alloc::string::String,
    #[prost(message, optional, tag="8")]
    pub created_at: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(message, optional, tag="9")]
    pub resolved_at: ::core::option::Option<::prost_types::Timestamp>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GlobalPnL {
    #[prost(string, tag="1")]
    pub total_volume: ::prost::alloc::string::String,
    #[prost(string, tag="2")]
    pub total_trades: ::prost::alloc::string::String,
    #[prost(string, tag="3")]
    pub total_fees: ::prost::alloc::string::String,
    #[prost(string, tag="4")]
    pub active_users: ::prost::alloc::string::String,
    #[prost(string, tag="5")]
    pub active_markets: ::prost::alloc::string::String,
    #[prost(string, tag="6")]
    pub resolved_markets: ::prost::alloc::string::String,
    #[prost(message, optional, tag="7")]
    pub timestamp: ::core::option::Option<::prost_types::Timestamp>,
}
/// CTF Exchange Event Messages
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CtfExchangeOrderFilled {
    #[prost(string, tag="1")]
    pub evt_tx_hash: ::prost::alloc::string::String,
    #[prost(uint32, tag="2")]
    pub evt_index: u32,
    #[prost(message, optional, tag="3")]
    pub evt_block_time: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(uint64, tag="4")]
    pub evt_block_number: u64,
    #[prost(bytes="vec", tag="5")]
    pub maker: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", tag="6")]
    pub taker: ::prost::alloc::vec::Vec<u8>,
    #[prost(string, tag="7")]
    pub maker_asset_id: ::prost::alloc::string::String,
    #[prost(string, tag="8")]
    pub taker_asset_id: ::prost::alloc::string::String,
    #[prost(string, tag="9")]
    pub maker_amount_filled: ::prost::alloc::string::String,
    #[prost(string, tag="10")]
    pub taker_amount_filled: ::prost::alloc::string::String,
    #[prost(string, tag="11")]
    pub fee: ::prost::alloc::string::String,
    #[prost(bytes="vec", tag="12")]
    pub order_hash: ::prost::alloc::vec::Vec<u8>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CtfExchangeOrdersMatched {
    #[prost(string, tag="1")]
    pub evt_tx_hash: ::prost::alloc::string::String,
    #[prost(uint32, tag="2")]
    pub evt_index: u32,
    #[prost(message, optional, tag="3")]
    pub evt_block_time: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(uint64, tag="4")]
    pub evt_block_number: u64,
    #[prost(string, tag="5")]
    pub maker_asset_id: ::prost::alloc::string::String,
    #[prost(string, tag="6")]
    pub taker_asset_id: ::prost::alloc::string::String,
    #[prost(string, tag="7")]
    pub maker_amount_filled: ::prost::alloc::string::String,
    #[prost(string, tag="8")]
    pub taker_amount_filled: ::prost::alloc::string::String,
    #[prost(bytes="vec", tag="9")]
    pub taker_order_hash: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", tag="10")]
    pub taker_order_maker: ::prost::alloc::vec::Vec<u8>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CtfExchangeOrderCancelled {
    #[prost(string, tag="1")]
    pub evt_tx_hash: ::prost::alloc::string::String,
    #[prost(uint32, tag="2")]
    pub evt_index: u32,
    #[prost(message, optional, tag="3")]
    pub evt_block_time: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(uint64, tag="4")]
    pub evt_block_number: u64,
    #[prost(bytes="vec", tag="5")]
    pub order_hash: ::prost::alloc::vec::Vec<u8>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CtfExchangeFeeCharged {
    #[prost(string, tag="1")]
    pub evt_tx_hash: ::prost::alloc::string::String,
    #[prost(uint32, tag="2")]
    pub evt_index: u32,
    #[prost(message, optional, tag="3")]
    pub evt_block_time: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(uint64, tag="4")]
    pub evt_block_number: u64,
    #[prost(bytes="vec", tag="5")]
    pub receiver: ::prost::alloc::vec::Vec<u8>,
    #[prost(string, tag="6")]
    pub token_id: ::prost::alloc::string::String,
    #[prost(string, tag="7")]
    pub amount: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CtfExchangeTokenRegistered {
    #[prost(string, tag="1")]
    pub evt_tx_hash: ::prost::alloc::string::String,
    #[prost(uint32, tag="2")]
    pub evt_index: u32,
    #[prost(message, optional, tag="3")]
    pub evt_block_time: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(uint64, tag="4")]
    pub evt_block_number: u64,
    #[prost(bytes="vec", tag="5")]
    pub condition_id: ::prost::alloc::vec::Vec<u8>,
    #[prost(string, tag="6")]
    pub token0: ::prost::alloc::string::String,
    #[prost(string, tag="7")]
    pub token1: ::prost::alloc::string::String,
}
/// USDC Event Messages
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UsdcTransfer {
    #[prost(string, tag="1")]
    pub evt_tx_hash: ::prost::alloc::string::String,
    #[prost(uint32, tag="2")]
    pub evt_index: u32,
    #[prost(message, optional, tag="3")]
    pub evt_block_time: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(uint64, tag="4")]
    pub evt_block_number: u64,
    #[prost(bytes="vec", tag="5")]
    pub from: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", tag="6")]
    pub to: ::prost::alloc::vec::Vec<u8>,
    #[prost(string, tag="7")]
    pub value: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UsdcApproval {
    #[prost(string, tag="1")]
    pub evt_tx_hash: ::prost::alloc::string::String,
    #[prost(uint32, tag="2")]
    pub evt_index: u32,
    #[prost(message, optional, tag="3")]
    pub evt_block_time: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(uint64, tag="4")]
    pub evt_block_number: u64,
    #[prost(bytes="vec", tag="5")]
    pub owner: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", tag="6")]
    pub spender: ::prost::alloc::vec::Vec<u8>,
    #[prost(string, tag="7")]
    pub value: ::prost::alloc::string::String,
}
// @@protoc_insertion_point(module)
