// @generated
// This file is @generated by prost-build.
/// Pure Dune Query P&L Data - EXACT MATCH TO DUNE QUERY
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PureDunePnL {
    #[prost(message, repeated, tag="1")]
    pub user_pnls: ::prost::alloc::vec::Vec<DuneUserPnL>,
    #[prost(message, repeated, tag="2")]
    pub market_data: ::prost::alloc::vec::Vec<DuneMarketData>,
    #[prost(message, repeated, tag="3")]
    pub token_transfers: ::prost::alloc::vec::Vec<DuneTokenTransfer>,
    #[prost(message, repeated, tag="4")]
    pub order_fills: ::prost::alloc::vec::Vec<DuneOrderFill>,
    #[prost(message, repeated, tag="5")]
    pub reward_claims: ::prost::alloc::vec::Vec<DuneRewardClaim>,
    #[prost(message, repeated, tag="6")]
    pub price_data: ::prost::alloc::vec::Vec<DunePriceData>,
    #[prost(string, tag="7")]
    pub total_users: ::prost::alloc::string::String,
    #[prost(string, tag="8")]
    pub total_volume: ::prost::alloc::string::String,
    #[prost(string, tag="9")]
    pub total_profits: ::prost::alloc::string::String,
    #[prost(string, tag="10")]
    pub total_losses: ::prost::alloc::string::String,
    #[prost(uint64, tag="11")]
    pub block_number: u64,
    #[prost(message, optional, tag="12")]
    pub block_timestamp: ::core::option::Option<::prost_types::Timestamp>,
}
/// Dune User P&L - Exact match to Dune query output
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DuneUserPnL {
    #[prost(string, tag="1")]
    pub user_address: ::prost::alloc::string::String,
    /// net_usdc from Dune query
    #[prost(string, tag="2")]
    pub net_usdc: ::prost::alloc::string::String,
    /// share_value from Dune query  
    #[prost(string, tag="3")]
    pub share_value: ::prost::alloc::string::String,
    /// trading_pnl from Dune query
    #[prost(string, tag="4")]
    pub trading_pnl: ::prost::alloc::string::String,
    /// liq_pnl from Dune query
    #[prost(string, tag="5")]
    pub liq_pnl: ::prost::alloc::string::String,
    /// total_pnl from Dune query
    #[prost(string, tag="6")]
    pub total_pnl: ::prost::alloc::string::String,
    #[prost(message, repeated, tag="7")]
    pub holdings: ::prost::alloc::vec::Vec<DuneTokenHolding>,
    #[prost(message, optional, tag="8")]
    pub last_activity: ::core::option::Option<::prost_types::Timestamp>,
}
/// Dune Market Data - From markets CTE in Dune query
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DuneMarketData {
    #[prost(string, tag="1")]
    pub condition_id: ::prost::alloc::string::String,
    #[prost(string, tag="2")]
    pub token0: ::prost::alloc::string::String,
    #[prost(string, tag="3")]
    pub token1: ::prost::alloc::string::String,
    #[prost(string, tag="4")]
    pub question: ::prost::alloc::string::String,
    #[prost(bool, tag="5")]
    pub is_neg_risk: bool,
    #[prost(message, optional, tag="6")]
    pub created_at: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(uint64, tag="7")]
    pub block_number: u64,
}
/// Dune Token Transfer - From combined CTE in Dune query
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DuneTokenTransfer {
    #[prost(string, tag="1")]
    pub transaction_hash: ::prost::alloc::string::String,
    #[prost(string, tag="2")]
    pub user_address: ::prost::alloc::string::String,
    #[prost(string, tag="3")]
    pub token_id: ::prost::alloc::string::String,
    /// Already converted to USDC units (divided by 1000000)
    #[prost(string, tag="4")]
    pub amount: ::prost::alloc::string::String,
    /// "ERC1155_SINGLE", "ERC1155_BATCH", "ERC20"
    #[prost(string, tag="5")]
    pub transfer_type: ::prost::alloc::string::String,
    #[prost(message, optional, tag="6")]
    pub block_timestamp: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(uint64, tag="7")]
    pub block_number: u64,
}
/// Dune Order Fill - From clob_combined CTE in Dune query
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DuneOrderFill {
    #[prost(string, tag="1")]
    pub transaction_hash: ::prost::alloc::string::String,
    #[prost(uint32, tag="2")]
    pub log_index: u32,
    #[prost(message, optional, tag="3")]
    pub block_timestamp: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(uint64, tag="4")]
    pub block_number: u64,
    #[prost(string, tag="5")]
    pub maker_address: ::prost::alloc::string::String,
    #[prost(string, tag="6")]
    pub taker_address: ::prost::alloc::string::String,
    #[prost(string, tag="7")]
    pub maker_asset_id: ::prost::alloc::string::String,
    #[prost(string, tag="8")]
    pub taker_asset_id: ::prost::alloc::string::String,
    #[prost(string, tag="9")]
    pub maker_amount_filled: ::prost::alloc::string::String,
    #[prost(string, tag="10")]
    pub taker_amount_filled: ::prost::alloc::string::String,
    #[prost(string, tag="11")]
    pub fee: ::prost::alloc::string::String,
    #[prost(string, tag="12")]
    pub order_hash: ::prost::alloc::string::String,
    #[prost(bool, tag="13")]
    pub is_neg_risk: bool,
}
/// Dune Reward Claim - From rewards CTE in Dune query
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DuneRewardClaim {
    #[prost(string, tag="1")]
    pub transaction_hash: ::prost::alloc::string::String,
    #[prost(uint32, tag="2")]
    pub log_index: u32,
    #[prost(message, optional, tag="3")]
    pub block_timestamp: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(uint64, tag="4")]
    pub block_number: u64,
    #[prost(string, tag="5")]
    pub airdrop_recipient: ::prost::alloc::string::String,
    /// "uma", "usdc"
    #[prost(string, tag="6")]
    pub asset: ::prost::alloc::string::String,
    /// Local currency amount
    #[prost(string, tag="7")]
    pub lc_amount: ::prost::alloc::string::String,
    /// USD amount
    #[prost(string, tag="8")]
    pub usd_amount: ::prost::alloc::string::String,
    #[prost(string, tag="9")]
    pub token_address: ::prost::alloc::string::String,
}
/// Dune Price Data - From prices CTE in Dune query
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DunePriceData {
    #[prost(string, tag="1")]
    pub token_id: ::prost::alloc::string::String,
    /// Calculated from latest trades
    #[prost(string, tag="2")]
    pub price: ::prost::alloc::string::String,
    #[prost(message, optional, tag="3")]
    pub last_trade_time: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(uint64, tag="4")]
    pub block_number: u64,
}
/// Dune Token Holding - From holders CTE in Dune query
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DuneTokenHolding {
    #[prost(string, tag="1")]
    pub user_address: ::prost::alloc::string::String,
    #[prost(string, tag="2")]
    pub token_id: ::prost::alloc::string::String,
    /// Already converted to USDC units
    #[prost(string, tag="3")]
    pub amount: ::prost::alloc::string::String,
    /// P1_P2_Latest_Price from Dune query
    #[prost(string, tag="4")]
    pub latest_price: ::prost::alloc::string::String,
    /// price * amount
    #[prost(string, tag="5")]
    pub share_value: ::prost::alloc::string::String,
}
/// TokenRegistered Events (CTF Exchange)
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TokenRegisteredEvents {
    #[prost(message, repeated, tag="1")]
    pub token_registered: ::prost::alloc::vec::Vec<TokenRegistered>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TokenRegistered {
    #[prost(string, tag="1")]
    pub evt_tx_hash: ::prost::alloc::string::String,
    #[prost(uint32, tag="2")]
    pub evt_index: u32,
    #[prost(message, optional, tag="3")]
    pub evt_block_time: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(uint64, tag="4")]
    pub evt_block_number: u64,
    #[prost(bytes="vec", tag="5")]
    pub condition_id: ::prost::alloc::vec::Vec<u8>,
    #[prost(string, tag="6")]
    pub token0: ::prost::alloc::string::String,
    #[prost(string, tag="7")]
    pub token1: ::prost::alloc::string::String,
}
/// NegRisk TokenRegistered Events
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NegRiskTokenRegisteredEvents {
    #[prost(message, repeated, tag="1")]
    pub neg_risk_token_registered: ::prost::alloc::vec::Vec<NegRiskTokenRegistered>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NegRiskTokenRegistered {
    #[prost(string, tag="1")]
    pub evt_tx_hash: ::prost::alloc::string::String,
    #[prost(uint32, tag="2")]
    pub evt_index: u32,
    #[prost(message, optional, tag="3")]
    pub evt_block_time: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(uint64, tag="4")]
    pub evt_block_number: u64,
    #[prost(bytes="vec", tag="5")]
    pub condition_id: ::prost::alloc::vec::Vec<u8>,
    #[prost(string, tag="6")]
    pub token0: ::prost::alloc::string::String,
    #[prost(string, tag="7")]
    pub token1: ::prost::alloc::string::String,
    #[prost(bool, tag="8")]
    pub is_neg_risk: bool,
    #[prost(bool, tag="9")]
    pub is_augmented: bool,
    #[prost(string, tag="10")]
    pub event_id: ::prost::alloc::string::String,
}
/// OrderFilled Events
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct OrderFilledEvents {
    #[prost(message, repeated, tag="1")]
    pub order_filled: ::prost::alloc::vec::Vec<OrderFilled>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct OrderFilled {
    #[prost(string, tag="1")]
    pub evt_tx_hash: ::prost::alloc::string::String,
    #[prost(uint32, tag="2")]
    pub evt_index: u32,
    #[prost(message, optional, tag="3")]
    pub evt_block_time: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(uint64, tag="4")]
    pub evt_block_number: u64,
    #[prost(bytes="vec", tag="5")]
    pub maker: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", tag="6")]
    pub taker: ::prost::alloc::vec::Vec<u8>,
    #[prost(string, tag="7")]
    pub maker_asset_id: ::prost::alloc::string::String,
    #[prost(string, tag="8")]
    pub taker_asset_id: ::prost::alloc::string::String,
    #[prost(string, tag="9")]
    pub maker_amount_filled: ::prost::alloc::string::String,
    #[prost(string, tag="10")]
    pub taker_amount_filled: ::prost::alloc::string::String,
    #[prost(string, tag="11")]
    pub fee: ::prost::alloc::string::String,
    #[prost(bytes="vec", tag="12")]
    pub order_hash: ::prost::alloc::vec::Vec<u8>,
}
/// Fixed Product Market Maker Factory Events
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FpmmFactoryEvents {
    #[prost(message, repeated, tag="1")]
    pub factory_creations: ::prost::alloc::vec::Vec<FpmmFactoryCreation>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FpmmFactoryCreation {
    #[prost(string, tag="1")]
    pub evt_tx_hash: ::prost::alloc::string::String,
    #[prost(uint32, tag="2")]
    pub evt_index: u32,
    #[prost(message, optional, tag="3")]
    pub evt_block_time: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(uint64, tag="4")]
    pub evt_block_number: u64,
    #[prost(bytes="vec", tag="5")]
    pub fixed_product_market_maker: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", tag="6")]
    pub creator: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", repeated, tag="7")]
    pub condition_ids: ::prost::alloc::vec::Vec<::prost::alloc::vec::Vec<u8>>,
    #[prost(bytes="vec", tag="8")]
    pub collateral_token: ::prost::alloc::vec::Vec<u8>,
    #[prost(string, tag="9")]
    pub fee: ::prost::alloc::string::String,
    #[prost(string, tag="10")]
    pub end_time: ::prost::alloc::string::String,
    #[prost(string, tag="11")]
    pub question_id: ::prost::alloc::string::String,
}
/// ERC1155 TransferSingle Events
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Erc1155TransferSingleEvents {
    #[prost(message, repeated, tag="1")]
    pub transfer_single: ::prost::alloc::vec::Vec<Erc1155TransferSingle>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Erc1155TransferSingle {
    #[prost(string, tag="1")]
    pub evt_tx_hash: ::prost::alloc::string::String,
    #[prost(uint32, tag="2")]
    pub evt_index: u32,
    #[prost(message, optional, tag="3")]
    pub evt_block_time: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(uint64, tag="4")]
    pub evt_block_number: u64,
    #[prost(bytes="vec", tag="5")]
    pub contract_address: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", tag="6")]
    pub operator: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", tag="7")]
    pub from: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", tag="8")]
    pub to: ::prost::alloc::vec::Vec<u8>,
    #[prost(string, tag="9")]
    pub id: ::prost::alloc::string::String,
    #[prost(string, tag="10")]
    pub value: ::prost::alloc::string::String,
}
/// ERC1155 TransferBatch Events
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Erc1155TransferBatchEvents {
    #[prost(message, repeated, tag="1")]
    pub transfer_batch: ::prost::alloc::vec::Vec<Erc1155TransferBatch>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Erc1155TransferBatch {
    #[prost(string, tag="1")]
    pub evt_tx_hash: ::prost::alloc::string::String,
    #[prost(uint32, tag="2")]
    pub evt_index: u32,
    #[prost(message, optional, tag="3")]
    pub evt_block_time: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(uint64, tag="4")]
    pub evt_block_number: u64,
    #[prost(bytes="vec", tag="5")]
    pub contract_address: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", tag="6")]
    pub operator: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", tag="7")]
    pub from: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", tag="8")]
    pub to: ::prost::alloc::vec::Vec<u8>,
    #[prost(string, repeated, tag="9")]
    pub ids: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(string, repeated, tag="10")]
    pub values: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
/// ERC20 Transfer Events
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Erc20TransferEvents {
    #[prost(message, repeated, tag="1")]
    pub transfer: ::prost::alloc::vec::Vec<Erc20Transfer>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Erc20Transfer {
    #[prost(string, tag="1")]
    pub evt_tx_hash: ::prost::alloc::string::String,
    #[prost(uint32, tag="2")]
    pub evt_index: u32,
    #[prost(message, optional, tag="3")]
    pub evt_block_time: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(uint64, tag="4")]
    pub evt_block_number: u64,
    #[prost(bytes="vec", tag="5")]
    pub contract_address: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", tag="6")]
    pub from: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", tag="7")]
    pub to: ::prost::alloc::vec::Vec<u8>,
    #[prost(string, tag="8")]
    pub value: ::prost::alloc::string::String,
}
/// Merkle Distributor Events
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MerkleDistributorEvents {
    #[prost(message, repeated, tag="1")]
    pub claimed: ::prost::alloc::vec::Vec<MerkleDistributorClaimed>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MerkleDistributorClaimed {
    #[prost(string, tag="1")]
    pub evt_tx_hash: ::prost::alloc::string::String,
    #[prost(uint32, tag="2")]
    pub evt_index: u32,
    #[prost(message, optional, tag="3")]
    pub evt_block_time: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(uint64, tag="4")]
    pub evt_block_number: u64,
    #[prost(bytes="vec", tag="5")]
    pub airdrop_recipient: ::prost::alloc::vec::Vec<u8>,
    #[prost(string, tag="6")]
    pub amount: ::prost::alloc::string::String,
    #[prost(string, tag="7")]
    pub token_address: ::prost::alloc::string::String,
}
/// CTF Events
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CtfEvents {
    #[prost(message, repeated, tag="1")]
    pub condition_preparations: ::prost::alloc::vec::Vec<CtfConditionPreparation>,
    #[prost(message, repeated, tag="2")]
    pub condition_resolutions: ::prost::alloc::vec::Vec<CtfConditionResolution>,
    #[prost(message, repeated, tag="3")]
    pub position_splits: ::prost::alloc::vec::Vec<CtfPositionSplit>,
    #[prost(message, repeated, tag="4")]
    pub position_merges: ::prost::alloc::vec::Vec<CtfPositionMerge>,
    #[prost(message, repeated, tag="5")]
    pub position_redemptions: ::prost::alloc::vec::Vec<CtfPositionRedeem>,
    #[prost(message, repeated, tag="6")]
    pub transfer_singles: ::prost::alloc::vec::Vec<CtfTransferSingle>,
    #[prost(message, repeated, tag="7")]
    pub transfer_batches: ::prost::alloc::vec::Vec<CtfTransferBatch>,
}
/// USDC Events
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UsdcEvents {
    #[prost(message, repeated, tag="1")]
    pub transfers: ::prost::alloc::vec::Vec<UsdcTransfer>,
    #[prost(message, repeated, tag="2")]
    pub approvals: ::prost::alloc::vec::Vec<UsdcApproval>,
}
/// CTF Event Messages
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CtfConditionPreparation {
    #[prost(string, tag="1")]
    pub evt_tx_hash: ::prost::alloc::string::String,
    #[prost(uint32, tag="2")]
    pub evt_index: u32,
    #[prost(message, optional, tag="3")]
    pub evt_block_time: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(uint64, tag="4")]
    pub evt_block_number: u64,
    #[prost(bytes="vec", tag="5")]
    pub condition_id: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", tag="6")]
    pub oracle: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", tag="7")]
    pub question_id: ::prost::alloc::vec::Vec<u8>,
    #[prost(uint32, tag="8")]
    pub outcome_slot_count: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CtfConditionResolution {
    #[prost(string, tag="1")]
    pub evt_tx_hash: ::prost::alloc::string::String,
    #[prost(uint32, tag="2")]
    pub evt_index: u32,
    #[prost(message, optional, tag="3")]
    pub evt_block_time: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(uint64, tag="4")]
    pub evt_block_number: u64,
    #[prost(bytes="vec", tag="5")]
    pub condition_id: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", tag="6")]
    pub oracle: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", tag="7")]
    pub question_id: ::prost::alloc::vec::Vec<u8>,
    #[prost(uint32, tag="8")]
    pub outcome_slot_count: u32,
    #[prost(string, repeated, tag="9")]
    pub payout_numerators: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(string, tag="10")]
    pub payout_denominator: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CtfPositionSplit {
    #[prost(string, tag="1")]
    pub evt_tx_hash: ::prost::alloc::string::String,
    #[prost(uint32, tag="2")]
    pub evt_index: u32,
    #[prost(message, optional, tag="3")]
    pub evt_block_time: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(uint64, tag="4")]
    pub evt_block_number: u64,
    #[prost(bytes="vec", tag="5")]
    pub stakeholder: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", tag="6")]
    pub collateral_token: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", tag="7")]
    pub parent_collection_id: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", tag="8")]
    pub condition_id: ::prost::alloc::vec::Vec<u8>,
    #[prost(string, repeated, tag="9")]
    pub partition: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(string, tag="10")]
    pub amount: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CtfPositionMerge {
    #[prost(string, tag="1")]
    pub evt_tx_hash: ::prost::alloc::string::String,
    #[prost(uint32, tag="2")]
    pub evt_index: u32,
    #[prost(message, optional, tag="3")]
    pub evt_block_time: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(uint64, tag="4")]
    pub evt_block_number: u64,
    #[prost(bytes="vec", tag="5")]
    pub stakeholder: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", tag="6")]
    pub collateral_token: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", tag="7")]
    pub parent_collection_id: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", tag="8")]
    pub condition_id: ::prost::alloc::vec::Vec<u8>,
    #[prost(string, repeated, tag="9")]
    pub partition: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(string, tag="10")]
    pub amount: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CtfPositionRedeem {
    #[prost(string, tag="1")]
    pub evt_tx_hash: ::prost::alloc::string::String,
    #[prost(uint32, tag="2")]
    pub evt_index: u32,
    #[prost(message, optional, tag="3")]
    pub evt_block_time: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(uint64, tag="4")]
    pub evt_block_number: u64,
    #[prost(bytes="vec", tag="5")]
    pub redeemer: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", tag="6")]
    pub collateral_token: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", tag="7")]
    pub parent_collection_id: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", tag="8")]
    pub condition_id: ::prost::alloc::vec::Vec<u8>,
    #[prost(string, repeated, tag="9")]
    pub index_sets: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(string, tag="10")]
    pub payout: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CtfTransferSingle {
    #[prost(string, tag="1")]
    pub evt_tx_hash: ::prost::alloc::string::String,
    #[prost(uint32, tag="2")]
    pub evt_index: u32,
    #[prost(message, optional, tag="3")]
    pub evt_block_time: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(uint64, tag="4")]
    pub evt_block_number: u64,
    #[prost(bytes="vec", tag="5")]
    pub operator: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", tag="6")]
    pub from: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", tag="7")]
    pub to: ::prost::alloc::vec::Vec<u8>,
    #[prost(string, tag="8")]
    pub token_id: ::prost::alloc::string::String,
    #[prost(string, tag="9")]
    pub value: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CtfTransferBatch {
    #[prost(string, tag="1")]
    pub evt_tx_hash: ::prost::alloc::string::String,
    #[prost(uint32, tag="2")]
    pub evt_index: u32,
    #[prost(message, optional, tag="3")]
    pub evt_block_time: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(uint64, tag="4")]
    pub evt_block_number: u64,
    #[prost(bytes="vec", tag="5")]
    pub operator: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", tag="6")]
    pub from: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", tag="7")]
    pub to: ::prost::alloc::vec::Vec<u8>,
    #[prost(string, repeated, tag="8")]
    pub token_ids: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(string, repeated, tag="9")]
    pub values: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
/// USDC Event Messages
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UsdcTransfer {
    #[prost(string, tag="1")]
    pub evt_tx_hash: ::prost::alloc::string::String,
    #[prost(uint32, tag="2")]
    pub evt_index: u32,
    #[prost(message, optional, tag="3")]
    pub evt_block_time: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(uint64, tag="4")]
    pub evt_block_number: u64,
    #[prost(bytes="vec", tag="5")]
    pub from: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", tag="6")]
    pub to: ::prost::alloc::vec::Vec<u8>,
    #[prost(string, tag="7")]
    pub value: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UsdcApproval {
    #[prost(string, tag="1")]
    pub evt_tx_hash: ::prost::alloc::string::String,
    #[prost(uint32, tag="2")]
    pub evt_index: u32,
    #[prost(message, optional, tag="3")]
    pub evt_block_time: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(uint64, tag="4")]
    pub evt_block_number: u64,
    #[prost(bytes="vec", tag="5")]
    pub owner: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", tag="6")]
    pub spender: ::prost::alloc::vec::Vec<u8>,
    #[prost(string, tag="7")]
    pub value: ::prost::alloc::string::String,
}
// @@protoc_insertion_point(module)
